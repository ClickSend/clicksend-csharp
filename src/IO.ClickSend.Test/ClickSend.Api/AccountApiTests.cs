/* 
 * ClickSend v3 API
 *
 *  This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 
 *
 * OpenAPI spec version: 3.1
 * Contact: support@clicksend.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;

using IO.ClickSend.Client;
using IO.ClickSend.ClickSend.Api;
using IO.ClickSend.ClickSend.Model;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace IO.ClickSend.Test
{
    /// <summary>
    ///  Class for testing AccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by ClickSend Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestClass]
    public class AccountApiTests
    {
        private AccountApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [TestInitialize]
        public void Init()
        {
            instance = new AccountApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TestCleanup]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountApi
        /// </summary>
        [TestMethod]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountApi
            //Assert.IsInstanceOfType(typeof(AccountApi), instance, "instance is a AccountApi");
        }

        /// <summary>
        /// Test AccountGet
        /// </summary>
        [TestMethod]
        public void AccountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AccountGet();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test AccountPost
        /// </summary>
        [TestMethod]
        public void AccountPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Account body = null;
            //var response = instance.AccountPost(body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test AccountUseageBySubaccountGet
        /// </summary>
        [TestMethod]
        public void AccountUseageBySubaccountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? year = null;
            //int? month = null;
            //var response = instance.AccountUseageBySubaccountGet(year, month);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test AccountVerifySendPut
        /// </summary>
        [TestMethod]
        public void AccountVerifySendPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountVerify body = null;
            //var response = instance.AccountVerifySendPut(body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test AccountVerifyVerifyByActivationTokenPut
        /// </summary>
        [TestMethod]
        public void AccountVerifyVerifyByActivationTokenPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? activationToken = null;
            //var response = instance.AccountVerifyVerifyByActivationTokenPut(activationToken);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test ForgotPasswordPut
        /// </summary>
        [TestMethod]
        public void ForgotPasswordPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ForgotPassword body = null;
            //var response = instance.ForgotPasswordPut(body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test ForgotPasswordVerifyPut
        /// </summary>
        [TestMethod]
        public void ForgotPasswordVerifyPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountForgotPasswordVerify body = null;
            //var response = instance.ForgotPasswordVerifyPut(body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test ForgotUsernamePut
        /// </summary>
        [TestMethod]
        public void ForgotUsernamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ForgotUsername body = null;
            //var response = instance.ForgotUsernamePut(body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
    }

}
