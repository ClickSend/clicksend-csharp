/* 
 * ClickSend v3 API
 *
 *  This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 
 *
 * OpenAPI spec version: 3.1
 * Contact: support@clicksend.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.ClickSend.Client;
using IO.ClickSend.ClickSend.Model;

namespace IO.ClickSend.ClickSend.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IEmailMarketingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all email addresses
        /// </summary>
        /// <remarks>
        /// Get all email addresses
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        string AllowedEmailAddressGet (int? page = null, int? limit = null);

        /// <summary>
        /// Get all email addresses
        /// </summary>
        /// <remarks>
        /// Get all email addresses
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AllowedEmailAddressGetWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Create allowed Email Address
        /// </summary>
        /// <remarks>
        /// Create allowed Email Address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string AllowedEmailAddressPost (EmailAddress body = null);

        /// <summary>
        /// Create allowed Email Address
        /// </summary>
        /// <remarks>
        /// Create allowed Email Address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AllowedEmailAddressPostWithHttpInfo (EmailAddress body = null);
        /// <summary>
        /// Cancel email campaign
        /// </summary>
        /// <remarks>
        /// Cancel email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>string</returns>
        string CancelEmailCampaignPut (int? emailCampaignId);

        /// <summary>
        /// Cancel email campaign
        /// </summary>
        /// <remarks>
        /// Cancel email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CancelEmailCampaignPutWithHttpInfo (int? emailCampaignId);
        /// <summary>
        /// Get specific email campaign
        /// </summary>
        /// <remarks>
        /// Get specific email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>string</returns>
        string EmailCampaignGet (int? emailCampaignId);

        /// <summary>
        /// Get specific email campaign
        /// </summary>
        /// <remarks>
        /// Get specific email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailCampaignGetWithHttpInfo (int? emailCampaignId);
        /// <summary>
        /// Export specific email campaign history
        /// </summary>
        /// <remarks>
        /// Export specific email campaign history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <returns>string</returns>
        string EmailCampaignHistoryExportGet (int? emailCampaignId, int? dateFrom = null, int? dateTo = null);

        /// <summary>
        /// Export specific email campaign history
        /// </summary>
        /// <remarks>
        /// Export specific email campaign history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailCampaignHistoryExportGetWithHttpInfo (int? emailCampaignId, int? dateFrom = null, int? dateTo = null);
        /// <summary>
        /// Get specific email campaign history
        /// </summary>
        /// <remarks>
        /// Get specific email campaign history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        string EmailCampaignHistoryGet (int? emailCampaignId, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get specific email campaign history
        /// </summary>
        /// <remarks>
        /// Get specific email campaign history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailCampaignHistoryGetWithHttpInfo (int? emailCampaignId, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null);
        /// <summary>
        /// Send email campaign
        /// </summary>
        /// <remarks>
        /// Send email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>string</returns>
        string EmailCampaignPost (EmailCampaign body);

        /// <summary>
        /// Send email campaign
        /// </summary>
        /// <remarks>
        /// Send email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailCampaignPostWithHttpInfo (EmailCampaign body);
        /// <summary>
        /// Calculate email campaign price
        /// </summary>
        /// <remarks>
        /// Calculate email campaign price
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>string</returns>
        string EmailCampaignPricePost (EmailCampaign body);

        /// <summary>
        /// Calculate email campaign price
        /// </summary>
        /// <remarks>
        /// Calculate email campaign price
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailCampaignPricePostWithHttpInfo (EmailCampaign body);
        /// <summary>
        /// Edit email campaign
        /// </summary>
        /// <remarks>
        /// Edit email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>string</returns>
        string EmailCampaignPut (EmailCampaign body, int? emailCampaignId);

        /// <summary>
        /// Edit email campaign
        /// </summary>
        /// <remarks>
        /// Edit email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailCampaignPutWithHttpInfo (EmailCampaign body, int? emailCampaignId);
        /// <summary>
        /// Get all email campaigns
        /// </summary>
        /// <remarks>
        /// Get all email campaigns
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        string EmailCampaignsGet (int? page = null, int? limit = null);

        /// <summary>
        /// Get all email campaigns
        /// </summary>
        /// <remarks>
        /// Get all email campaigns
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailCampaignsGetWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Send verification token
        /// </summary>
        /// <remarks>
        /// Send verification token
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>string</returns>
        string SendVerificationTokenGet (int? emailAddressId);

        /// <summary>
        /// Send verification token
        /// </summary>
        /// <remarks>
        /// Send verification token
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SendVerificationTokenGetWithHttpInfo (int? emailAddressId);
        /// <summary>
        /// Delete specific email address
        /// </summary>
        /// <remarks>
        /// Delete specific email address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>string</returns>
        string SpecificAllowedEmailAddressDelete (int? emailAddressId);

        /// <summary>
        /// Delete specific email address
        /// </summary>
        /// <remarks>
        /// Delete specific email address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SpecificAllowedEmailAddressDeleteWithHttpInfo (int? emailAddressId);
        /// <summary>
        /// Get specific email address
        /// </summary>
        /// <remarks>
        /// Get specific email address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>string</returns>
        string SpecificAllowedEmailAddressGet (int? emailAddressId);

        /// <summary>
        /// Get specific email address
        /// </summary>
        /// <remarks>
        /// Get specific email address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SpecificAllowedEmailAddressGetWithHttpInfo (int? emailAddressId);
        /// <summary>
        /// Verify email address using verification token
        /// </summary>
        /// <remarks>
        /// Verify email address using verification token
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <param name="activationToken">Your activation token.</param>
        /// <returns>string</returns>
        string VerifyAllowedEmailAddressGet (int? emailAddressId, string activationToken);

        /// <summary>
        /// Verify email address using verification token
        /// </summary>
        /// <remarks>
        /// Verify email address using verification token
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <param name="activationToken">Your activation token.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VerifyAllowedEmailAddressGetWithHttpInfo (int? emailAddressId, string activationToken);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all email addresses
        /// </summary>
        /// <remarks>
        /// Get all email addresses
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AllowedEmailAddressGetAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all email addresses
        /// </summary>
        /// <remarks>
        /// Get all email addresses
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AllowedEmailAddressGetAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Create allowed Email Address
        /// </summary>
        /// <remarks>
        /// Create allowed Email Address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AllowedEmailAddressPostAsync (EmailAddress body = null);

        /// <summary>
        /// Create allowed Email Address
        /// </summary>
        /// <remarks>
        /// Create allowed Email Address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AllowedEmailAddressPostAsyncWithHttpInfo (EmailAddress body = null);
        /// <summary>
        /// Cancel email campaign
        /// </summary>
        /// <remarks>
        /// Cancel email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CancelEmailCampaignPutAsync (int? emailCampaignId);

        /// <summary>
        /// Cancel email campaign
        /// </summary>
        /// <remarks>
        /// Cancel email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CancelEmailCampaignPutAsyncWithHttpInfo (int? emailCampaignId);
        /// <summary>
        /// Get specific email campaign
        /// </summary>
        /// <remarks>
        /// Get specific email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailCampaignGetAsync (int? emailCampaignId);

        /// <summary>
        /// Get specific email campaign
        /// </summary>
        /// <remarks>
        /// Get specific email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignGetAsyncWithHttpInfo (int? emailCampaignId);
        /// <summary>
        /// Export specific email campaign history
        /// </summary>
        /// <remarks>
        /// Export specific email campaign history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailCampaignHistoryExportGetAsync (int? emailCampaignId, int? dateFrom = null, int? dateTo = null);

        /// <summary>
        /// Export specific email campaign history
        /// </summary>
        /// <remarks>
        /// Export specific email campaign history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignHistoryExportGetAsyncWithHttpInfo (int? emailCampaignId, int? dateFrom = null, int? dateTo = null);
        /// <summary>
        /// Get specific email campaign history
        /// </summary>
        /// <remarks>
        /// Get specific email campaign history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailCampaignHistoryGetAsync (int? emailCampaignId, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get specific email campaign history
        /// </summary>
        /// <remarks>
        /// Get specific email campaign history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignHistoryGetAsyncWithHttpInfo (int? emailCampaignId, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null);
        /// <summary>
        /// Send email campaign
        /// </summary>
        /// <remarks>
        /// Send email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailCampaignPostAsync (EmailCampaign body);

        /// <summary>
        /// Send email campaign
        /// </summary>
        /// <remarks>
        /// Send email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignPostAsyncWithHttpInfo (EmailCampaign body);
        /// <summary>
        /// Calculate email campaign price
        /// </summary>
        /// <remarks>
        /// Calculate email campaign price
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailCampaignPricePostAsync (EmailCampaign body);

        /// <summary>
        /// Calculate email campaign price
        /// </summary>
        /// <remarks>
        /// Calculate email campaign price
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignPricePostAsyncWithHttpInfo (EmailCampaign body);
        /// <summary>
        /// Edit email campaign
        /// </summary>
        /// <remarks>
        /// Edit email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailCampaignPutAsync (EmailCampaign body, int? emailCampaignId);

        /// <summary>
        /// Edit email campaign
        /// </summary>
        /// <remarks>
        /// Edit email campaign
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignPutAsyncWithHttpInfo (EmailCampaign body, int? emailCampaignId);
        /// <summary>
        /// Get all email campaigns
        /// </summary>
        /// <remarks>
        /// Get all email campaigns
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailCampaignsGetAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all email campaigns
        /// </summary>
        /// <remarks>
        /// Get all email campaigns
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignsGetAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Send verification token
        /// </summary>
        /// <remarks>
        /// Send verification token
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SendVerificationTokenGetAsync (int? emailAddressId);

        /// <summary>
        /// Send verification token
        /// </summary>
        /// <remarks>
        /// Send verification token
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SendVerificationTokenGetAsyncWithHttpInfo (int? emailAddressId);
        /// <summary>
        /// Delete specific email address
        /// </summary>
        /// <remarks>
        /// Delete specific email address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SpecificAllowedEmailAddressDeleteAsync (int? emailAddressId);

        /// <summary>
        /// Delete specific email address
        /// </summary>
        /// <remarks>
        /// Delete specific email address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SpecificAllowedEmailAddressDeleteAsyncWithHttpInfo (int? emailAddressId);
        /// <summary>
        /// Get specific email address
        /// </summary>
        /// <remarks>
        /// Get specific email address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SpecificAllowedEmailAddressGetAsync (int? emailAddressId);

        /// <summary>
        /// Get specific email address
        /// </summary>
        /// <remarks>
        /// Get specific email address
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SpecificAllowedEmailAddressGetAsyncWithHttpInfo (int? emailAddressId);
        /// <summary>
        /// Verify email address using verification token
        /// </summary>
        /// <remarks>
        /// Verify email address using verification token
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <param name="activationToken">Your activation token.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VerifyAllowedEmailAddressGetAsync (int? emailAddressId, string activationToken);

        /// <summary>
        /// Verify email address using verification token
        /// </summary>
        /// <remarks>
        /// Verify email address using verification token
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <param name="activationToken">Your activation token.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VerifyAllowedEmailAddressGetAsyncWithHttpInfo (int? emailAddressId, string activationToken);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class EmailMarketingApi : IEmailMarketingApi
    {
        private IO.ClickSend.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailMarketingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailMarketingApi(String basePath)
        {
            this.Configuration = new IO.ClickSend.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.ClickSend.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailMarketingApi"/> class
        /// </summary>
        /// <returns></returns>
        public EmailMarketingApi()
        {
            this.Configuration = IO.ClickSend.Client.Configuration.Default;

            ExceptionFactory = IO.ClickSend.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailMarketingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailMarketingApi(IO.ClickSend.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.ClickSend.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.ClickSend.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.ClickSend.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.ClickSend.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all email addresses Get all email addresses
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        public string AllowedEmailAddressGet (int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = AllowedEmailAddressGetWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all email addresses Get all email addresses
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AllowedEmailAddressGetWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/email/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AllowedEmailAddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all email addresses Get all email addresses
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AllowedEmailAddressGetAsync (int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = await AllowedEmailAddressGetAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all email addresses Get all email addresses
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AllowedEmailAddressGetAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/email/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AllowedEmailAddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create allowed Email Address Create allowed Email Address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string AllowedEmailAddressPost (EmailAddress body = null)
        {
             ApiResponse<string> localVarResponse = AllowedEmailAddressPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create allowed Email Address Create allowed Email Address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AllowedEmailAddressPostWithHttpInfo (EmailAddress body = null)
        {

            var localVarPath = "/email/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AllowedEmailAddressPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create allowed Email Address Create allowed Email Address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AllowedEmailAddressPostAsync (EmailAddress body = null)
        {
             ApiResponse<string> localVarResponse = await AllowedEmailAddressPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create allowed Email Address Create allowed Email Address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AllowedEmailAddressPostAsyncWithHttpInfo (EmailAddress body = null)
        {

            var localVarPath = "/email/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AllowedEmailAddressPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Cancel email campaign Cancel email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>string</returns>
        public string CancelEmailCampaignPut (int? emailCampaignId)
        {
             ApiResponse<string> localVarResponse = CancelEmailCampaignPutWithHttpInfo(emailCampaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel email campaign Cancel email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CancelEmailCampaignPutWithHttpInfo (int? emailCampaignId)
        {
            // verify the required parameter 'emailCampaignId' is set
            if (emailCampaignId == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignId' when calling EmailMarketingApi->CancelEmailCampaignPut");

            var localVarPath = "/email-campaigns/{email_campaign_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailCampaignId != null) localVarPathParams.Add("email_campaign_id", this.Configuration.ApiClient.ParameterToString(emailCampaignId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelEmailCampaignPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Cancel email campaign Cancel email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CancelEmailCampaignPutAsync (int? emailCampaignId)
        {
             ApiResponse<string> localVarResponse = await CancelEmailCampaignPutAsyncWithHttpInfo(emailCampaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel email campaign Cancel email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CancelEmailCampaignPutAsyncWithHttpInfo (int? emailCampaignId)
        {
            // verify the required parameter 'emailCampaignId' is set
            if (emailCampaignId == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignId' when calling EmailMarketingApi->CancelEmailCampaignPut");

            var localVarPath = "/email-campaigns/{email_campaign_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailCampaignId != null) localVarPathParams.Add("email_campaign_id", this.Configuration.ApiClient.ParameterToString(emailCampaignId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelEmailCampaignPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get specific email campaign Get specific email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>string</returns>
        public string EmailCampaignGet (int? emailCampaignId)
        {
             ApiResponse<string> localVarResponse = EmailCampaignGetWithHttpInfo(emailCampaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific email campaign Get specific email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailCampaignGetWithHttpInfo (int? emailCampaignId)
        {
            // verify the required parameter 'emailCampaignId' is set
            if (emailCampaignId == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignId' when calling EmailMarketingApi->EmailCampaignGet");

            var localVarPath = "/email-campaigns/{email_campaign_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailCampaignId != null) localVarPathParams.Add("email_campaign_id", this.Configuration.ApiClient.ParameterToString(emailCampaignId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get specific email campaign Get specific email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailCampaignGetAsync (int? emailCampaignId)
        {
             ApiResponse<string> localVarResponse = await EmailCampaignGetAsyncWithHttpInfo(emailCampaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specific email campaign Get specific email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignGetAsyncWithHttpInfo (int? emailCampaignId)
        {
            // verify the required parameter 'emailCampaignId' is set
            if (emailCampaignId == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignId' when calling EmailMarketingApi->EmailCampaignGet");

            var localVarPath = "/email-campaigns/{email_campaign_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailCampaignId != null) localVarPathParams.Add("email_campaign_id", this.Configuration.ApiClient.ParameterToString(emailCampaignId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export specific email campaign history Export specific email campaign history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <returns>string</returns>
        public string EmailCampaignHistoryExportGet (int? emailCampaignId, int? dateFrom = null, int? dateTo = null)
        {
             ApiResponse<string> localVarResponse = EmailCampaignHistoryExportGetWithHttpInfo(emailCampaignId, dateFrom, dateTo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export specific email campaign history Export specific email campaign history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailCampaignHistoryExportGetWithHttpInfo (int? emailCampaignId, int? dateFrom = null, int? dateTo = null)
        {
            // verify the required parameter 'emailCampaignId' is set
            if (emailCampaignId == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignId' when calling EmailMarketingApi->EmailCampaignHistoryExportGet");

            var localVarPath = "/email-campaigns/{email_campaign_id}/history/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailCampaignId != null) localVarPathParams.Add("email_campaign_id", this.Configuration.ApiClient.ParameterToString(emailCampaignId)); // path parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_from", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_to", dateTo)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignHistoryExportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export specific email campaign history Export specific email campaign history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailCampaignHistoryExportGetAsync (int? emailCampaignId, int? dateFrom = null, int? dateTo = null)
        {
             ApiResponse<string> localVarResponse = await EmailCampaignHistoryExportGetAsyncWithHttpInfo(emailCampaignId, dateFrom, dateTo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export specific email campaign history Export specific email campaign history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignHistoryExportGetAsyncWithHttpInfo (int? emailCampaignId, int? dateFrom = null, int? dateTo = null)
        {
            // verify the required parameter 'emailCampaignId' is set
            if (emailCampaignId == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignId' when calling EmailMarketingApi->EmailCampaignHistoryExportGet");

            var localVarPath = "/email-campaigns/{email_campaign_id}/history/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailCampaignId != null) localVarPathParams.Add("email_campaign_id", this.Configuration.ApiClient.ParameterToString(emailCampaignId)); // path parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_from", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_to", dateTo)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignHistoryExportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get specific email campaign history Get specific email campaign history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        public string EmailCampaignHistoryGet (int? emailCampaignId, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = EmailCampaignHistoryGetWithHttpInfo(emailCampaignId, dateFrom, dateTo, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific email campaign history Get specific email campaign history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailCampaignHistoryGetWithHttpInfo (int? emailCampaignId, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'emailCampaignId' is set
            if (emailCampaignId == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignId' when calling EmailMarketingApi->EmailCampaignHistoryGet");

            var localVarPath = "/email-campaigns/{email_campaign_id}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailCampaignId != null) localVarPathParams.Add("email_campaign_id", this.Configuration.ApiClient.ParameterToString(emailCampaignId)); // path parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_from", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_to", dateTo)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get specific email campaign history Get specific email campaign history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailCampaignHistoryGetAsync (int? emailCampaignId, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = await EmailCampaignHistoryGetAsyncWithHttpInfo(emailCampaignId, dateFrom, dateTo, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specific email campaign history Get specific email campaign history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignHistoryGetAsyncWithHttpInfo (int? emailCampaignId, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'emailCampaignId' is set
            if (emailCampaignId == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignId' when calling EmailMarketingApi->EmailCampaignHistoryGet");

            var localVarPath = "/email-campaigns/{email_campaign_id}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailCampaignId != null) localVarPathParams.Add("email_campaign_id", this.Configuration.ApiClient.ParameterToString(emailCampaignId)); // path parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_from", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_to", dateTo)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send email campaign Send email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>string</returns>
        public string EmailCampaignPost (EmailCampaign body)
        {
             ApiResponse<string> localVarResponse = EmailCampaignPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send email campaign Send email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailCampaignPostWithHttpInfo (EmailCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmailMarketingApi->EmailCampaignPost");

            var localVarPath = "/email-campaigns/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send email campaign Send email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailCampaignPostAsync (EmailCampaign body)
        {
             ApiResponse<string> localVarResponse = await EmailCampaignPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send email campaign Send email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignPostAsyncWithHttpInfo (EmailCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmailMarketingApi->EmailCampaignPost");

            var localVarPath = "/email-campaigns/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Calculate email campaign price Calculate email campaign price
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>string</returns>
        public string EmailCampaignPricePost (EmailCampaign body)
        {
             ApiResponse<string> localVarResponse = EmailCampaignPricePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate email campaign price Calculate email campaign price
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailCampaignPricePostWithHttpInfo (EmailCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmailMarketingApi->EmailCampaignPricePost");

            var localVarPath = "/email-campaigns/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignPricePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Calculate email campaign price Calculate email campaign price
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailCampaignPricePostAsync (EmailCampaign body)
        {
             ApiResponse<string> localVarResponse = await EmailCampaignPricePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate email campaign price Calculate email campaign price
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignPricePostAsyncWithHttpInfo (EmailCampaign body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmailMarketingApi->EmailCampaignPricePost");

            var localVarPath = "/email-campaigns/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignPricePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Edit email campaign Edit email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>string</returns>
        public string EmailCampaignPut (EmailCampaign body, int? emailCampaignId)
        {
             ApiResponse<string> localVarResponse = EmailCampaignPutWithHttpInfo(body, emailCampaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit email campaign Edit email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailCampaignPutWithHttpInfo (EmailCampaign body, int? emailCampaignId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmailMarketingApi->EmailCampaignPut");
            // verify the required parameter 'emailCampaignId' is set
            if (emailCampaignId == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignId' when calling EmailMarketingApi->EmailCampaignPut");

            var localVarPath = "/email-campaigns/{email_campaign_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailCampaignId != null) localVarPathParams.Add("email_campaign_id", this.Configuration.ApiClient.ParameterToString(emailCampaignId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Edit email campaign Edit email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailCampaignPutAsync (EmailCampaign body, int? emailCampaignId)
        {
             ApiResponse<string> localVarResponse = await EmailCampaignPutAsyncWithHttpInfo(body, emailCampaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit email campaign Edit email campaign
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email model</param>
        /// <param name="emailCampaignId">Allowed email campaign id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignPutAsyncWithHttpInfo (EmailCampaign body, int? emailCampaignId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmailMarketingApi->EmailCampaignPut");
            // verify the required parameter 'emailCampaignId' is set
            if (emailCampaignId == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignId' when calling EmailMarketingApi->EmailCampaignPut");

            var localVarPath = "/email-campaigns/{email_campaign_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailCampaignId != null) localVarPathParams.Add("email_campaign_id", this.Configuration.ApiClient.ParameterToString(emailCampaignId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all email campaigns Get all email campaigns
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        public string EmailCampaignsGet (int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = EmailCampaignsGetWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all email campaigns Get all email campaigns
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailCampaignsGetWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/email-campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all email campaigns Get all email campaigns
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailCampaignsGetAsync (int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = await EmailCampaignsGetAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all email campaigns Get all email campaigns
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailCampaignsGetAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/email-campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailCampaignsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send verification token Send verification token
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>string</returns>
        public string SendVerificationTokenGet (int? emailAddressId)
        {
             ApiResponse<string> localVarResponse = SendVerificationTokenGetWithHttpInfo(emailAddressId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send verification token Send verification token
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SendVerificationTokenGetWithHttpInfo (int? emailAddressId)
        {
            // verify the required parameter 'emailAddressId' is set
            if (emailAddressId == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressId' when calling EmailMarketingApi->SendVerificationTokenGet");

            var localVarPath = "/email/address-verify/{email_address_id}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailAddressId != null) localVarPathParams.Add("email_address_id", this.Configuration.ApiClient.ParameterToString(emailAddressId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendVerificationTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send verification token Send verification token
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SendVerificationTokenGetAsync (int? emailAddressId)
        {
             ApiResponse<string> localVarResponse = await SendVerificationTokenGetAsyncWithHttpInfo(emailAddressId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send verification token Send verification token
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SendVerificationTokenGetAsyncWithHttpInfo (int? emailAddressId)
        {
            // verify the required parameter 'emailAddressId' is set
            if (emailAddressId == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressId' when calling EmailMarketingApi->SendVerificationTokenGet");

            var localVarPath = "/email/address-verify/{email_address_id}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailAddressId != null) localVarPathParams.Add("email_address_id", this.Configuration.ApiClient.ParameterToString(emailAddressId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendVerificationTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete specific email address Delete specific email address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>string</returns>
        public string SpecificAllowedEmailAddressDelete (int? emailAddressId)
        {
             ApiResponse<string> localVarResponse = SpecificAllowedEmailAddressDeleteWithHttpInfo(emailAddressId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete specific email address Delete specific email address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SpecificAllowedEmailAddressDeleteWithHttpInfo (int? emailAddressId)
        {
            // verify the required parameter 'emailAddressId' is set
            if (emailAddressId == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressId' when calling EmailMarketingApi->SpecificAllowedEmailAddressDelete");

            var localVarPath = "/email/addresses/{email_address_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailAddressId != null) localVarPathParams.Add("email_address_id", this.Configuration.ApiClient.ParameterToString(emailAddressId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpecificAllowedEmailAddressDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete specific email address Delete specific email address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SpecificAllowedEmailAddressDeleteAsync (int? emailAddressId)
        {
             ApiResponse<string> localVarResponse = await SpecificAllowedEmailAddressDeleteAsyncWithHttpInfo(emailAddressId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete specific email address Delete specific email address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SpecificAllowedEmailAddressDeleteAsyncWithHttpInfo (int? emailAddressId)
        {
            // verify the required parameter 'emailAddressId' is set
            if (emailAddressId == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressId' when calling EmailMarketingApi->SpecificAllowedEmailAddressDelete");

            var localVarPath = "/email/addresses/{email_address_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailAddressId != null) localVarPathParams.Add("email_address_id", this.Configuration.ApiClient.ParameterToString(emailAddressId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpecificAllowedEmailAddressDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get specific email address Get specific email address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>string</returns>
        public string SpecificAllowedEmailAddressGet (int? emailAddressId)
        {
             ApiResponse<string> localVarResponse = SpecificAllowedEmailAddressGetWithHttpInfo(emailAddressId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific email address Get specific email address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SpecificAllowedEmailAddressGetWithHttpInfo (int? emailAddressId)
        {
            // verify the required parameter 'emailAddressId' is set
            if (emailAddressId == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressId' when calling EmailMarketingApi->SpecificAllowedEmailAddressGet");

            var localVarPath = "/email/addresses/{email_address_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailAddressId != null) localVarPathParams.Add("email_address_id", this.Configuration.ApiClient.ParameterToString(emailAddressId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpecificAllowedEmailAddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get specific email address Get specific email address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SpecificAllowedEmailAddressGetAsync (int? emailAddressId)
        {
             ApiResponse<string> localVarResponse = await SpecificAllowedEmailAddressGetAsyncWithHttpInfo(emailAddressId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specific email address Get specific email address
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SpecificAllowedEmailAddressGetAsyncWithHttpInfo (int? emailAddressId)
        {
            // verify the required parameter 'emailAddressId' is set
            if (emailAddressId == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressId' when calling EmailMarketingApi->SpecificAllowedEmailAddressGet");

            var localVarPath = "/email/addresses/{email_address_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailAddressId != null) localVarPathParams.Add("email_address_id", this.Configuration.ApiClient.ParameterToString(emailAddressId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpecificAllowedEmailAddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Verify email address using verification token Verify email address using verification token
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <param name="activationToken">Your activation token.</param>
        /// <returns>string</returns>
        public string VerifyAllowedEmailAddressGet (int? emailAddressId, string activationToken)
        {
             ApiResponse<string> localVarResponse = VerifyAllowedEmailAddressGetWithHttpInfo(emailAddressId, activationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify email address using verification token Verify email address using verification token
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <param name="activationToken">Your activation token.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > VerifyAllowedEmailAddressGetWithHttpInfo (int? emailAddressId, string activationToken)
        {
            // verify the required parameter 'emailAddressId' is set
            if (emailAddressId == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressId' when calling EmailMarketingApi->VerifyAllowedEmailAddressGet");
            // verify the required parameter 'activationToken' is set
            if (activationToken == null)
                throw new ApiException(400, "Missing required parameter 'activationToken' when calling EmailMarketingApi->VerifyAllowedEmailAddressGet");

            var localVarPath = "/email/address-verify/{email_address_id}/verify/{activation_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailAddressId != null) localVarPathParams.Add("email_address_id", this.Configuration.ApiClient.ParameterToString(emailAddressId)); // path parameter
            if (activationToken != null) localVarPathParams.Add("activation_token", this.Configuration.ApiClient.ParameterToString(activationToken)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyAllowedEmailAddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Verify email address using verification token Verify email address using verification token
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <param name="activationToken">Your activation token.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VerifyAllowedEmailAddressGetAsync (int? emailAddressId, string activationToken)
        {
             ApiResponse<string> localVarResponse = await VerifyAllowedEmailAddressGetAsyncWithHttpInfo(emailAddressId, activationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify email address using verification token Verify email address using verification token
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressId">Allowed email address id</param>
        /// <param name="activationToken">Your activation token.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> VerifyAllowedEmailAddressGetAsyncWithHttpInfo (int? emailAddressId, string activationToken)
        {
            // verify the required parameter 'emailAddressId' is set
            if (emailAddressId == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressId' when calling EmailMarketingApi->VerifyAllowedEmailAddressGet");
            // verify the required parameter 'activationToken' is set
            if (activationToken == null)
                throw new ApiException(400, "Missing required parameter 'activationToken' when calling EmailMarketingApi->VerifyAllowedEmailAddressGet");

            var localVarPath = "/email/address-verify/{email_address_id}/verify/{activation_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailAddressId != null) localVarPathParams.Add("email_address_id", this.Configuration.ApiClient.ParameterToString(emailAddressId)); // path parameter
            if (activationToken != null) localVarPathParams.Add("activation_token", this.Configuration.ApiClient.ParameterToString(activationToken)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyAllowedEmailAddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
