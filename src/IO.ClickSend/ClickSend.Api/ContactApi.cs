/* 
 * ClickSend v3 API
 *
 *  This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 
 *
 * OpenAPI spec version: 3.1
 * Contact: support@clicksend.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.ClickSend.Client;

namespace IO.ClickSend.ClickSend.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// Delete a contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">List ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <returns>string</returns>
        string ListsContactsByListIdAndContactIdDelete (int? listId, int? contactId);

        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// Delete a contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">List ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ListsContactsByListIdAndContactIdDeleteWithHttpInfo (int? listId, int? contactId);
        /// <summary>
        /// Get a specific contact
        /// </summary>
        /// <remarks>
        /// Get a specific contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your contact list id you want to access.</param>
        /// <param name="contactId">Your contact id you want to access.</param>
        /// <returns>string</returns>
        string ListsContactsByListIdAndContactIdGet (int? listId, int? contactId);

        /// <summary>
        /// Get a specific contact
        /// </summary>
        /// <remarks>
        /// Get a specific contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your contact list id you want to access.</param>
        /// <param name="contactId">Your contact id you want to access.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ListsContactsByListIdAndContactIdGetWithHttpInfo (int? listId, int? contactId);
        /// <summary>
        /// Update specific contact
        /// </summary>
        /// <remarks>
        /// Update specific contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="contact">Contact model</param>
        /// <returns>string</returns>
        string ListsContactsByListIdAndContactIdPut (int? listId, int? contactId, Contact contact);

        /// <summary>
        /// Update specific contact
        /// </summary>
        /// <remarks>
        /// Update specific contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="contact">Contact model</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ListsContactsByListIdAndContactIdPutWithHttpInfo (int? listId, int? contactId, Contact contact);
        /// <summary>
        /// Get all contacts in a list
        /// </summary>
        /// <remarks>
        /// Get all contacts in a list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list ID</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <param name="updatedAfter">Get all contacts updated after a given timestamp. (optional, default to 10)</param>
        /// <returns>string</returns>
        string ListsContactsByListIdGet (int? listId, int? page = null, int? limit = null, int? updatedAfter = null);

        /// <summary>
        /// Get all contacts in a list
        /// </summary>
        /// <remarks>
        /// Get all contacts in a list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list ID</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <param name="updatedAfter">Get all contacts updated after a given timestamp. (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ListsContactsByListIdGetWithHttpInfo (int? listId, int? page = null, int? limit = null, int? updatedAfter = null);
        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create new contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact model</param>
        /// <param name="listId">List id</param>
        /// <returns>string</returns>
        string ListsContactsByListIdPost (Contact contact, int? listId);

        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create new contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact model</param>
        /// <param name="listId">List id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ListsContactsByListIdPostWithHttpInfo (Contact contact, int? listId);
        /// <summary>
        /// Copy contact to another list
        /// </summary>
        /// <remarks>
        /// Copy contact to another list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to copy the contact to.</param>
        /// <returns>string</returns>
        string ListsCopyContactPut (int? fromListId, int? contactId, int? toListId);

        /// <summary>
        /// Copy contact to another list
        /// </summary>
        /// <remarks>
        /// Copy contact to another list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to copy the contact to.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ListsCopyContactPutWithHttpInfo (int? fromListId, int? contactId, int? toListId);
        /// <summary>
        /// Remove all opted out contacts
        /// </summary>
        /// <remarks>
        /// Remove all opted out contacts
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your list id</param>
        /// <param name="optOutListId">Your opt out list id</param>
        /// <returns>string</returns>
        string ListsRemoveOptedOutContactsByListIdAndOptOutListIdPut (int? listId, int? optOutListId);

        /// <summary>
        /// Remove all opted out contacts
        /// </summary>
        /// <remarks>
        /// Remove all opted out contacts
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your list id</param>
        /// <param name="optOutListId">Your opt out list id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ListsRemoveOptedOutContactsByListIdAndOptOutListIdPutWithHttpInfo (int? listId, int? optOutListId);
        /// <summary>
        /// Transfer contact to another list
        /// </summary>
        /// <remarks>
        /// Transfer contact to another list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to transfer contact to.</param>
        /// <returns>string</returns>
        string ListsTransferContactPut (int? fromListId, int? contactId, int? toListId);

        /// <summary>
        /// Transfer contact to another list
        /// </summary>
        /// <remarks>
        /// Transfer contact to another list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to transfer contact to.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ListsTransferContactPutWithHttpInfo (int? fromListId, int? contactId, int? toListId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// Delete a contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">List ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ListsContactsByListIdAndContactIdDeleteAsync (int? listId, int? contactId);

        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// Delete a contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">List ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ListsContactsByListIdAndContactIdDeleteAsyncWithHttpInfo (int? listId, int? contactId);
        /// <summary>
        /// Get a specific contact
        /// </summary>
        /// <remarks>
        /// Get a specific contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your contact list id you want to access.</param>
        /// <param name="contactId">Your contact id you want to access.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ListsContactsByListIdAndContactIdGetAsync (int? listId, int? contactId);

        /// <summary>
        /// Get a specific contact
        /// </summary>
        /// <remarks>
        /// Get a specific contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your contact list id you want to access.</param>
        /// <param name="contactId">Your contact id you want to access.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ListsContactsByListIdAndContactIdGetAsyncWithHttpInfo (int? listId, int? contactId);
        /// <summary>
        /// Update specific contact
        /// </summary>
        /// <remarks>
        /// Update specific contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="contact">Contact model</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ListsContactsByListIdAndContactIdPutAsync (int? listId, int? contactId, Contact contact);

        /// <summary>
        /// Update specific contact
        /// </summary>
        /// <remarks>
        /// Update specific contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="contact">Contact model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ListsContactsByListIdAndContactIdPutAsyncWithHttpInfo (int? listId, int? contactId, Contact contact);
        /// <summary>
        /// Get all contacts in a list
        /// </summary>
        /// <remarks>
        /// Get all contacts in a list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list ID</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <param name="updatedAfter">Get all contacts updated after a given timestamp. (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ListsContactsByListIdGetAsync (int? listId, int? page = null, int? limit = null, int? updatedAfter = null);

        /// <summary>
        /// Get all contacts in a list
        /// </summary>
        /// <remarks>
        /// Get all contacts in a list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list ID</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <param name="updatedAfter">Get all contacts updated after a given timestamp. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ListsContactsByListIdGetAsyncWithHttpInfo (int? listId, int? page = null, int? limit = null, int? updatedAfter = null);
        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create new contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact model</param>
        /// <param name="listId">List id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ListsContactsByListIdPostAsync (Contact contact, int? listId);

        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create new contact
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact model</param>
        /// <param name="listId">List id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ListsContactsByListIdPostAsyncWithHttpInfo (Contact contact, int? listId);
        /// <summary>
        /// Copy contact to another list
        /// </summary>
        /// <remarks>
        /// Copy contact to another list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to copy the contact to.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ListsCopyContactPutAsync (int? fromListId, int? contactId, int? toListId);

        /// <summary>
        /// Copy contact to another list
        /// </summary>
        /// <remarks>
        /// Copy contact to another list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to copy the contact to.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ListsCopyContactPutAsyncWithHttpInfo (int? fromListId, int? contactId, int? toListId);
        /// <summary>
        /// Remove all opted out contacts
        /// </summary>
        /// <remarks>
        /// Remove all opted out contacts
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your list id</param>
        /// <param name="optOutListId">Your opt out list id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ListsRemoveOptedOutContactsByListIdAndOptOutListIdPutAsync (int? listId, int? optOutListId);

        /// <summary>
        /// Remove all opted out contacts
        /// </summary>
        /// <remarks>
        /// Remove all opted out contacts
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your list id</param>
        /// <param name="optOutListId">Your opt out list id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ListsRemoveOptedOutContactsByListIdAndOptOutListIdPutAsyncWithHttpInfo (int? listId, int? optOutListId);
        /// <summary>
        /// Transfer contact to another list
        /// </summary>
        /// <remarks>
        /// Transfer contact to another list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to transfer contact to.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ListsTransferContactPutAsync (int? fromListId, int? contactId, int? toListId);

        /// <summary>
        /// Transfer contact to another list
        /// </summary>
        /// <remarks>
        /// Transfer contact to another list
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to transfer contact to.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ListsTransferContactPutAsyncWithHttpInfo (int? fromListId, int? contactId, int? toListId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactApi : IContactApi
    {
        private IO.ClickSend.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactApi(String basePath)
        {
            this.Configuration = new IO.ClickSend.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.ClickSend.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactApi(IO.ClickSend.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.ClickSend.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.ClickSend.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.ClickSend.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.ClickSend.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a contact Delete a contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">List ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <returns>string</returns>
        public string ListsContactsByListIdAndContactIdDelete (int? listId, int? contactId)
        {
             ApiResponse<string> localVarResponse = ListsContactsByListIdAndContactIdDeleteWithHttpInfo(listId, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a contact Delete a contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">List ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ListsContactsByListIdAndContactIdDeleteWithHttpInfo (int? listId, int? contactId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsContactsByListIdAndContactIdDelete");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactApi->ListsContactsByListIdAndContactIdDelete");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsContactsByListIdAndContactIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a contact Delete a contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">List ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ListsContactsByListIdAndContactIdDeleteAsync (int? listId, int? contactId)
        {
             ApiResponse<string> localVarResponse = await ListsContactsByListIdAndContactIdDeleteAsyncWithHttpInfo(listId, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a contact Delete a contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">List ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ListsContactsByListIdAndContactIdDeleteAsyncWithHttpInfo (int? listId, int? contactId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsContactsByListIdAndContactIdDelete");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactApi->ListsContactsByListIdAndContactIdDelete");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsContactsByListIdAndContactIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a specific contact Get a specific contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your contact list id you want to access.</param>
        /// <param name="contactId">Your contact id you want to access.</param>
        /// <returns>string</returns>
        public string ListsContactsByListIdAndContactIdGet (int? listId, int? contactId)
        {
             ApiResponse<string> localVarResponse = ListsContactsByListIdAndContactIdGetWithHttpInfo(listId, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific contact Get a specific contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your contact list id you want to access.</param>
        /// <param name="contactId">Your contact id you want to access.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ListsContactsByListIdAndContactIdGetWithHttpInfo (int? listId, int? contactId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsContactsByListIdAndContactIdGet");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactApi->ListsContactsByListIdAndContactIdGet");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsContactsByListIdAndContactIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a specific contact Get a specific contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your contact list id you want to access.</param>
        /// <param name="contactId">Your contact id you want to access.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ListsContactsByListIdAndContactIdGetAsync (int? listId, int? contactId)
        {
             ApiResponse<string> localVarResponse = await ListsContactsByListIdAndContactIdGetAsyncWithHttpInfo(listId, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific contact Get a specific contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your contact list id you want to access.</param>
        /// <param name="contactId">Your contact id you want to access.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ListsContactsByListIdAndContactIdGetAsyncWithHttpInfo (int? listId, int? contactId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsContactsByListIdAndContactIdGet");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactApi->ListsContactsByListIdAndContactIdGet");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsContactsByListIdAndContactIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update specific contact Update specific contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="contact">Contact model</param>
        /// <returns>string</returns>
        public string ListsContactsByListIdAndContactIdPut (int? listId, int? contactId, Contact contact)
        {
             ApiResponse<string> localVarResponse = ListsContactsByListIdAndContactIdPutWithHttpInfo(listId, contactId, contact);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update specific contact Update specific contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="contact">Contact model</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ListsContactsByListIdAndContactIdPutWithHttpInfo (int? listId, int? contactId, Contact contact)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsContactsByListIdAndContactIdPut");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactApi->ListsContactsByListIdAndContactIdPut");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling ContactApi->ListsContactsByListIdAndContactIdPut");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsContactsByListIdAndContactIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update specific contact Update specific contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="contact">Contact model</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ListsContactsByListIdAndContactIdPutAsync (int? listId, int? contactId, Contact contact)
        {
             ApiResponse<string> localVarResponse = await ListsContactsByListIdAndContactIdPutAsyncWithHttpInfo(listId, contactId, contact);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update specific contact Update specific contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="contact">Contact model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ListsContactsByListIdAndContactIdPutAsyncWithHttpInfo (int? listId, int? contactId, Contact contact)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsContactsByListIdAndContactIdPut");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactApi->ListsContactsByListIdAndContactIdPut");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling ContactApi->ListsContactsByListIdAndContactIdPut");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsContactsByListIdAndContactIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all contacts in a list Get all contacts in a list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list ID</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <param name="updatedAfter">Get all contacts updated after a given timestamp. (optional, default to 10)</param>
        /// <returns>string</returns>
        public string ListsContactsByListIdGet (int? listId, int? page = null, int? limit = null, int? updatedAfter = null)
        {
             ApiResponse<string> localVarResponse = ListsContactsByListIdGetWithHttpInfo(listId, page, limit, updatedAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contacts in a list Get all contacts in a list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list ID</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <param name="updatedAfter">Get all contacts updated after a given timestamp. (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ListsContactsByListIdGetWithHttpInfo (int? listId, int? page = null, int? limit = null, int? updatedAfter = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsContactsByListIdGet");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (updatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_after", updatedAfter)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsContactsByListIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all contacts in a list Get all contacts in a list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list ID</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <param name="updatedAfter">Get all contacts updated after a given timestamp. (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ListsContactsByListIdGetAsync (int? listId, int? page = null, int? limit = null, int? updatedAfter = null)
        {
             ApiResponse<string> localVarResponse = await ListsContactsByListIdGetAsyncWithHttpInfo(listId, page, limit, updatedAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contacts in a list Get all contacts in a list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Contact list ID</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <param name="updatedAfter">Get all contacts updated after a given timestamp. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ListsContactsByListIdGetAsyncWithHttpInfo (int? listId, int? page = null, int? limit = null, int? updatedAfter = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsContactsByListIdGet");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (updatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_after", updatedAfter)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsContactsByListIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create new contact Create new contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact model</param>
        /// <param name="listId">List id</param>
        /// <returns>string</returns>
        public string ListsContactsByListIdPost (Contact contact, int? listId)
        {
             ApiResponse<string> localVarResponse = ListsContactsByListIdPostWithHttpInfo(contact, listId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new contact Create new contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact model</param>
        /// <param name="listId">List id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ListsContactsByListIdPostWithHttpInfo (Contact contact, int? listId)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling ContactApi->ListsContactsByListIdPost");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsContactsByListIdPost");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsContactsByListIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create new contact Create new contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact model</param>
        /// <param name="listId">List id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ListsContactsByListIdPostAsync (Contact contact, int? listId)
        {
             ApiResponse<string> localVarResponse = await ListsContactsByListIdPostAsyncWithHttpInfo(contact, listId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new contact Create new contact
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact model</param>
        /// <param name="listId">List id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ListsContactsByListIdPostAsyncWithHttpInfo (Contact contact, int? listId)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling ContactApi->ListsContactsByListIdPost");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsContactsByListIdPost");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsContactsByListIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Copy contact to another list Copy contact to another list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to copy the contact to.</param>
        /// <returns>string</returns>
        public string ListsCopyContactPut (int? fromListId, int? contactId, int? toListId)
        {
             ApiResponse<string> localVarResponse = ListsCopyContactPutWithHttpInfo(fromListId, contactId, toListId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy contact to another list Copy contact to another list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to copy the contact to.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ListsCopyContactPutWithHttpInfo (int? fromListId, int? contactId, int? toListId)
        {
            // verify the required parameter 'fromListId' is set
            if (fromListId == null)
                throw new ApiException(400, "Missing required parameter 'fromListId' when calling ContactApi->ListsCopyContactPut");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactApi->ListsCopyContactPut");
            // verify the required parameter 'toListId' is set
            if (toListId == null)
                throw new ApiException(400, "Missing required parameter 'toListId' when calling ContactApi->ListsCopyContactPut");

            var localVarPath = "/lists/{from_list_id}/contacts/{contact_id}/copy/{to_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromListId != null) localVarPathParams.Add("from_list_id", this.Configuration.ApiClient.ParameterToString(fromListId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (toListId != null) localVarPathParams.Add("to_list_id", this.Configuration.ApiClient.ParameterToString(toListId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCopyContactPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Copy contact to another list Copy contact to another list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to copy the contact to.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ListsCopyContactPutAsync (int? fromListId, int? contactId, int? toListId)
        {
             ApiResponse<string> localVarResponse = await ListsCopyContactPutAsyncWithHttpInfo(fromListId, contactId, toListId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy contact to another list Copy contact to another list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to copy the contact to.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ListsCopyContactPutAsyncWithHttpInfo (int? fromListId, int? contactId, int? toListId)
        {
            // verify the required parameter 'fromListId' is set
            if (fromListId == null)
                throw new ApiException(400, "Missing required parameter 'fromListId' when calling ContactApi->ListsCopyContactPut");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactApi->ListsCopyContactPut");
            // verify the required parameter 'toListId' is set
            if (toListId == null)
                throw new ApiException(400, "Missing required parameter 'toListId' when calling ContactApi->ListsCopyContactPut");

            var localVarPath = "/lists/{from_list_id}/contacts/{contact_id}/copy/{to_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromListId != null) localVarPathParams.Add("from_list_id", this.Configuration.ApiClient.ParameterToString(fromListId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (toListId != null) localVarPathParams.Add("to_list_id", this.Configuration.ApiClient.ParameterToString(toListId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCopyContactPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove all opted out contacts Remove all opted out contacts
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your list id</param>
        /// <param name="optOutListId">Your opt out list id</param>
        /// <returns>string</returns>
        public string ListsRemoveOptedOutContactsByListIdAndOptOutListIdPut (int? listId, int? optOutListId)
        {
             ApiResponse<string> localVarResponse = ListsRemoveOptedOutContactsByListIdAndOptOutListIdPutWithHttpInfo(listId, optOutListId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all opted out contacts Remove all opted out contacts
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your list id</param>
        /// <param name="optOutListId">Your opt out list id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ListsRemoveOptedOutContactsByListIdAndOptOutListIdPutWithHttpInfo (int? listId, int? optOutListId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsRemoveOptedOutContactsByListIdAndOptOutListIdPut");
            // verify the required parameter 'optOutListId' is set
            if (optOutListId == null)
                throw new ApiException(400, "Missing required parameter 'optOutListId' when calling ContactApi->ListsRemoveOptedOutContactsByListIdAndOptOutListIdPut");

            var localVarPath = "/lists/{list_id}/remove-opted-out-contacts/{opt_out_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (optOutListId != null) localVarPathParams.Add("opt_out_list_id", this.Configuration.ApiClient.ParameterToString(optOutListId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsRemoveOptedOutContactsByListIdAndOptOutListIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove all opted out contacts Remove all opted out contacts
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your list id</param>
        /// <param name="optOutListId">Your opt out list id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ListsRemoveOptedOutContactsByListIdAndOptOutListIdPutAsync (int? listId, int? optOutListId)
        {
             ApiResponse<string> localVarResponse = await ListsRemoveOptedOutContactsByListIdAndOptOutListIdPutAsyncWithHttpInfo(listId, optOutListId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove all opted out contacts Remove all opted out contacts
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Your list id</param>
        /// <param name="optOutListId">Your opt out list id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ListsRemoveOptedOutContactsByListIdAndOptOutListIdPutAsyncWithHttpInfo (int? listId, int? optOutListId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactApi->ListsRemoveOptedOutContactsByListIdAndOptOutListIdPut");
            // verify the required parameter 'optOutListId' is set
            if (optOutListId == null)
                throw new ApiException(400, "Missing required parameter 'optOutListId' when calling ContactApi->ListsRemoveOptedOutContactsByListIdAndOptOutListIdPut");

            var localVarPath = "/lists/{list_id}/remove-opted-out-contacts/{opt_out_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (optOutListId != null) localVarPathParams.Add("opt_out_list_id", this.Configuration.ApiClient.ParameterToString(optOutListId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsRemoveOptedOutContactsByListIdAndOptOutListIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Transfer contact to another list Transfer contact to another list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to transfer contact to.</param>
        /// <returns>string</returns>
        public string ListsTransferContactPut (int? fromListId, int? contactId, int? toListId)
        {
             ApiResponse<string> localVarResponse = ListsTransferContactPutWithHttpInfo(fromListId, contactId, toListId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer contact to another list Transfer contact to another list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to transfer contact to.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ListsTransferContactPutWithHttpInfo (int? fromListId, int? contactId, int? toListId)
        {
            // verify the required parameter 'fromListId' is set
            if (fromListId == null)
                throw new ApiException(400, "Missing required parameter 'fromListId' when calling ContactApi->ListsTransferContactPut");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactApi->ListsTransferContactPut");
            // verify the required parameter 'toListId' is set
            if (toListId == null)
                throw new ApiException(400, "Missing required parameter 'toListId' when calling ContactApi->ListsTransferContactPut");

            var localVarPath = "/lists/{from_list_id}/contacts/{contact_id}/transfer/{to_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromListId != null) localVarPathParams.Add("from_list_id", this.Configuration.ApiClient.ParameterToString(fromListId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (toListId != null) localVarPathParams.Add("to_list_id", this.Configuration.ApiClient.ParameterToString(toListId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsTransferContactPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Transfer contact to another list Transfer contact to another list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to transfer contact to.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ListsTransferContactPutAsync (int? fromListId, int? contactId, int? toListId)
        {
             ApiResponse<string> localVarResponse = await ListsTransferContactPutAsyncWithHttpInfo(fromListId, contactId, toListId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer contact to another list Transfer contact to another list
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromListId">List ID for list that contains contact.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="toListId">List ID for list you want to transfer contact to.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ListsTransferContactPutAsyncWithHttpInfo (int? fromListId, int? contactId, int? toListId)
        {
            // verify the required parameter 'fromListId' is set
            if (fromListId == null)
                throw new ApiException(400, "Missing required parameter 'fromListId' when calling ContactApi->ListsTransferContactPut");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactApi->ListsTransferContactPut");
            // verify the required parameter 'toListId' is set
            if (toListId == null)
                throw new ApiException(400, "Missing required parameter 'toListId' when calling ContactApi->ListsTransferContactPut");

            var localVarPath = "/lists/{from_list_id}/contacts/{contact_id}/transfer/{to_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromListId != null) localVarPathParams.Add("from_list_id", this.Configuration.ApiClient.ParameterToString(fromListId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (toListId != null) localVarPathParams.Add("to_list_id", this.Configuration.ApiClient.ParameterToString(toListId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsTransferContactPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
