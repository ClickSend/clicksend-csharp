/* 
 * ClickSend v3 API
 *
 *  This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 
 *
 * OpenAPI spec version: 3.1
 * Contact: support@clicksend.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using ClickSendDateConverter = IO.ClickSend.Client.ClickSendDateConverter;
namespace IO.ClickSend.ClickSend.Model
{
    /// <summary>
    /// Credit card model
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "ClassType")]
        public partial class CreditCard :  IEquatable<CreditCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCard" /> class.
        /// </summary>
        /// <param name="number">Credit card number (required).</param>
        /// <param name="expiryMonth">Expiry month of credit card (required).</param>
        /// <param name="expiryYear">Expiry year of credit card (required).</param>
        /// <param name="cvc">CVC number of credit card (required).</param>
        /// <param name="name">Name printed on credit card (required).</param>
        /// <param name="bankName">Name of bank that credit card belongs to (required).</param>
        public CreditCard(string number = default(string), int? expiryMonth = default(int?), int? expiryYear = default(int?), int? cvc = default(int?), string name = default(string), string bankName = default(string))
        {
            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new InvalidDataException("number is a required property for CreditCard and cannot be null");
            }
            else
            {
                this.Number = number;
            }
            // to ensure "expiryMonth" is required (not null)
            if (expiryMonth == null)
            {
                throw new InvalidDataException("expiryMonth is a required property for CreditCard and cannot be null");
            }
            else
            {
                this.ExpiryMonth = expiryMonth;
            }
            // to ensure "expiryYear" is required (not null)
            if (expiryYear == null)
            {
                throw new InvalidDataException("expiryYear is a required property for CreditCard and cannot be null");
            }
            else
            {
                this.ExpiryYear = expiryYear;
            }
            // to ensure "cvc" is required (not null)
            if (cvc == null)
            {
                throw new InvalidDataException("cvc is a required property for CreditCard and cannot be null");
            }
            else
            {
                this.Cvc = cvc;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreditCard and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "bankName" is required (not null)
            if (bankName == null)
            {
                throw new InvalidDataException("bankName is a required property for CreditCard and cannot be null");
            }
            else
            {
                this.BankName = bankName;
            }
        }
        
        /// <summary>
        /// Credit card number
        /// </summary>
        /// <value>Credit card number</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Expiry month of credit card
        /// </summary>
        /// <value>Expiry month of credit card</value>
        [DataMember(Name="expiry_month", EmitDefaultValue=false)]
        public int? ExpiryMonth { get; set; }

        /// <summary>
        /// Expiry year of credit card
        /// </summary>
        /// <value>Expiry year of credit card</value>
        [DataMember(Name="expiry_year", EmitDefaultValue=false)]
        public int? ExpiryYear { get; set; }

        /// <summary>
        /// CVC number of credit card
        /// </summary>
        /// <value>CVC number of credit card</value>
        [DataMember(Name="cvc", EmitDefaultValue=false)]
        public int? Cvc { get; set; }

        /// <summary>
        /// Name printed on credit card
        /// </summary>
        /// <value>Name printed on credit card</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Name of bank that credit card belongs to
        /// </summary>
        /// <value>Name of bank that credit card belongs to</value>
        [DataMember(Name="bank_name", EmitDefaultValue=false)]
        public string BankName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCard {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  ExpiryMonth: ").Append(ExpiryMonth).Append("\n");
            sb.Append("  ExpiryYear: ").Append(ExpiryYear).Append("\n");
            sb.Append("  Cvc: ").Append(Cvc).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCard);
        }

        /// <summary>
        /// Returns true if CreditCard instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.ExpiryMonth == input.ExpiryMonth ||
                    (this.ExpiryMonth != null &&
                    this.ExpiryMonth.Equals(input.ExpiryMonth))
                ) && 
                (
                    this.ExpiryYear == input.ExpiryYear ||
                    (this.ExpiryYear != null &&
                    this.ExpiryYear.Equals(input.ExpiryYear))
                ) && 
                (
                    this.Cvc == input.Cvc ||
                    (this.Cvc != null &&
                    this.Cvc.Equals(input.Cvc))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.ExpiryMonth != null)
                    hashCode = hashCode * 59 + this.ExpiryMonth.GetHashCode();
                if (this.ExpiryYear != null)
                    hashCode = hashCode * 59 + this.ExpiryYear.GetHashCode();
                if (this.Cvc != null)
                    hashCode = hashCode * 59 + this.Cvc.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
