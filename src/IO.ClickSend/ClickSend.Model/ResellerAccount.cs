/* 
 * ClickSend v3 API
 *
 *  This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 
 *
 * OpenAPI spec version: 3.1
 * Contact: support@clicksend.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using ClickSendDateConverter = IO.ClickSend.Client.ClickSendDateConverter;
namespace IO.ClickSend.ClickSend.Model
{
    /// <summary>
    /// ResellerAccount model
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "ClassType")]
        public partial class ResellerAccount :  IEquatable<ResellerAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResellerAccount" /> class.
        /// </summary>
        /// <param name="username">Account username (required).</param>
        /// <param name="password">Account password (unhashed) (required).</param>
        /// <param name="userEmail">Account email (required).</param>
        /// <param name="userPhone">Account phone number (required).</param>
        /// <param name="userFirstName">Account owner first name (required).</param>
        /// <param name="userLastName">Account owner last name (required).</param>
        /// <param name="accountName">Account name (usually company name) (required).</param>
        /// <param name="country">Country of account holder (required).</param>
        public ResellerAccount(string username = default(string), string password = default(string), string userEmail = default(string), string userPhone = default(string), string userFirstName = default(string), string userLastName = default(string), string accountName = default(string), string country = default(string))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for ResellerAccount and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for ResellerAccount and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            // to ensure "userEmail" is required (not null)
            if (userEmail == null)
            {
                throw new InvalidDataException("userEmail is a required property for ResellerAccount and cannot be null");
            }
            else
            {
                this.UserEmail = userEmail;
            }
            // to ensure "userPhone" is required (not null)
            if (userPhone == null)
            {
                throw new InvalidDataException("userPhone is a required property for ResellerAccount and cannot be null");
            }
            else
            {
                this.UserPhone = userPhone;
            }
            // to ensure "userFirstName" is required (not null)
            if (userFirstName == null)
            {
                throw new InvalidDataException("userFirstName is a required property for ResellerAccount and cannot be null");
            }
            else
            {
                this.UserFirstName = userFirstName;
            }
            // to ensure "userLastName" is required (not null)
            if (userLastName == null)
            {
                throw new InvalidDataException("userLastName is a required property for ResellerAccount and cannot be null");
            }
            else
            {
                this.UserLastName = userLastName;
            }
            // to ensure "accountName" is required (not null)
            if (accountName == null)
            {
                throw new InvalidDataException("accountName is a required property for ResellerAccount and cannot be null");
            }
            else
            {
                this.AccountName = accountName;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for ResellerAccount and cannot be null");
            }
            else
            {
                this.Country = country;
            }
        }
        
        /// <summary>
        /// Account username
        /// </summary>
        /// <value>Account username</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Account password (unhashed)
        /// </summary>
        /// <value>Account password (unhashed)</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Account email
        /// </summary>
        /// <value>Account email</value>
        [DataMember(Name="user_email", EmitDefaultValue=false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Account phone number
        /// </summary>
        /// <value>Account phone number</value>
        [DataMember(Name="user_phone", EmitDefaultValue=false)]
        public string UserPhone { get; set; }

        /// <summary>
        /// Account owner first name
        /// </summary>
        /// <value>Account owner first name</value>
        [DataMember(Name="user_first_name", EmitDefaultValue=false)]
        public string UserFirstName { get; set; }

        /// <summary>
        /// Account owner last name
        /// </summary>
        /// <value>Account owner last name</value>
        [DataMember(Name="user_last_name", EmitDefaultValue=false)]
        public string UserLastName { get; set; }

        /// <summary>
        /// Account name (usually company name)
        /// </summary>
        /// <value>Account name (usually company name)</value>
        [DataMember(Name="account_name", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Country of account holder
        /// </summary>
        /// <value>Country of account holder</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResellerAccount {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  UserPhone: ").Append(UserPhone).Append("\n");
            sb.Append("  UserFirstName: ").Append(UserFirstName).Append("\n");
            sb.Append("  UserLastName: ").Append(UserLastName).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResellerAccount);
        }

        /// <summary>
        /// Returns true if ResellerAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of ResellerAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResellerAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                ) && 
                (
                    this.UserPhone == input.UserPhone ||
                    (this.UserPhone != null &&
                    this.UserPhone.Equals(input.UserPhone))
                ) && 
                (
                    this.UserFirstName == input.UserFirstName ||
                    (this.UserFirstName != null &&
                    this.UserFirstName.Equals(input.UserFirstName))
                ) && 
                (
                    this.UserLastName == input.UserLastName ||
                    (this.UserLastName != null &&
                    this.UserLastName.Equals(input.UserLastName))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.UserEmail != null)
                    hashCode = hashCode * 59 + this.UserEmail.GetHashCode();
                if (this.UserPhone != null)
                    hashCode = hashCode * 59 + this.UserPhone.GetHashCode();
                if (this.UserFirstName != null)
                    hashCode = hashCode * 59 + this.UserFirstName.GetHashCode();
                if (this.UserLastName != null)
                    hashCode = hashCode * 59 + this.UserLastName.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
